package com.rinearn.graph3d.renderer.simple;

import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;


// !!! NOTE !!!
// getRangeMin() とかの命名は、他の config 類との命名と一貫性に欠ける。getMinimum とかにすべき？
// -> このクラス内に、他の種類の minimum 量が将来的に追加される可能性を考慮すると getRangeMinimum の方が良い？
//    -> setRange があるのでそれとの対応がいい: getRnageMinimum/Maximum
//    -> getRangeMinimumCoordinate は？ 長いか
//!!! NOTE !!!

//!!! NOTE2 !!!
//
// なんか config コンテナベースの方向性に収束しつつあるので、この Axis の中に色々と情報保持してる構造が微妙になってきた気がする。
// どっち参照すればいいの？ みたいになる。なので内容の同期が必要になるんだけど、そもそも常に config コンテナ参照すりゃいいのでは。
//
// つまりこの Axis ってもう無くしてもいいのでは？ 初期の土台作りに必要だった足場みたいなもんで。
// そもそも Axis ってのが初見だとなんかイメージしづらい概念だし、あっても分かりやすくなるもんでもなさそうな。
//
// -> そもそも最初はなんでこうしたんだっけ。Axisというくくりでまとめるのが凄くいい、みたいに思ったはずだけど。
//
//    -> Label とか Scale とかのカテゴリーでくくるよりも Axis でまとめた方がよさそう、みたいになったと思うが。
//       つまり当時は逆に感じた。そういう観点があったはずで。
//
//    -> 最初はとりあえず散らばっていたものをすっきりまとめる過程で↑に思ったが、
//       しかしレンダラーのステートを全部コンテナに整理して上層から降って来るようにしようとすると、
//       Axis関連だけでは済まなくなるし、それで乖離していったのかと。
//       つまり、階層を上に昇れば設定画面とか設定ファイルとかの粒度との対応も想定したコンテナ群が必要で、
//       その階層だと Axis というくくりの横断的すぎる感じが逆にまずかった。整理において。
//
//       つまりAxisは概念として横断的なので、その横断レンジでカバーしきれる情報群に注目するとすっきりまとまるけど、
//       カバーしきれない情報群に対しては中途半端なくくりになってしまう。
//       そこの境界の外側をカバーするコンテナも、その中途半端な概念形の補集合みたいになって、やっぱり中途半端になる。
//       なので概念形がなんというかスクエアな感じの方が収まりがいい。実際の収納のように。
//       それで今みたいなコンテナの切り方に落ち着いてきた。という感じか。
//       なんとなくじわじわ変形してきたのでメモ残ってないが
//
// 削るか整理する方向で検討
//
//!!! NOTE2 !!!


/**
 * A class storing/handling informations related to an axis.
 * (e.g.: Maximum and minimum values of the range of the axis, and so on.)
 */
public final class Axis {

}
